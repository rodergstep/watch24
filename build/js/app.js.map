{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["const $carouselWrappers = $('.carousel-wrapper');\nif ($carouselWrappers.length) {\n  $carouselWrappers.each(function() {\n    const $carousel = $(this).children('.carousel');\n\n    if ($carousel.hasClass('slick-initialized')) return;\n\n    const savedOptions = $(this).data('carousel-settings');\n\n    let tabletSlides = savedOptions.slidesToShow == 1 ? 1 : 2;\n\n    let defaultOptions = {\n      dots: true,\n      // appendDots: $('.dots-container'),\n      arrows: true,\n      nextArrow: '<button type=\"button\" class=\"slick-next\"><span class=\"nav-text h5\">Next</span></button>',\n      prevArrow: '<button type=\"button\" class=\"slick-prev\"><span class=\"nav-text h5\">Previous</span></button>',\n      responsive: [\n        { breakpoint: 767, settings: { slidesToShow: tabletSlides, slidesToScroll: tabletSlides } }\n      ]\n    };\n\n    if (savedOptions.hasOwnProperty('mobile')) {\n      defaultOptions.responsive.push({\n        breakpoint: 600,\n        settings: { slidesToShow: savedOptions.mobile, slidesToScroll: 1 }\n      });\n    } else {\n      defaultOptions.responsive.push({\n        breakpoint: 600,\n        settings: { slidesToShow: 1, slidesToScroll: 1 }\n      });\n    }\n\n    const slickOptions = $.extend({}, defaultOptions, savedOptions);\n    $carousel.on('init reInit afterChange', function(event, slick, currentSlide, nextSlide) {\n      const i = (currentSlide || 0) + 1;\n      $(this)\n        .next('.carousel-slide-counter')\n        .html(\n          `<span class=\"current\">${i}</span><span class=\"slash\">/</span><span class=\"total\">${slick.slideCount}</span>`,\n        );\n    });\n\n    $carousel.on('beforeChange', (e, slick, currentSlide, nextSlide) => {\n      let $animatingElements = $(`div.slick-slide[data-slick-index=\"${  nextSlide  }\"]`).find(\n        '[data-animation]',\n      );\n    });\n    $carousel.slick(slickOptions);\n  });\n}\n"],"file":"app.js"}